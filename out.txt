{
    "TemplateBody": "# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\nDescription: CloudFormation environment template for infrastructure shared among Copilot workloads.\nMetadata:\n  Version: v1.34.0\n  Manifest: |\n    # The manifest for the \"staging\" environment.\n    # Read the full specification for the \"Environment\" type at:\n    #  https://aws.github.io/copilot-cli/docs/manifest/environment/\n    \n    # Your environment name will be used in naming your resources like VPC, cluster, etc.\n    name: staging\n    type: Environment\n    # Import your own VPC and subnets or configure how they should be created.\n    network:\n      vpc:\n        id: vpc-0a17e75ca029d7293\n        subnets:\n          public:\n            - id: subnet-0af9ee19c930ab38a\n            - id: subnet-034cc76393f7ae314\n          private:\n            - id: subnet-0bfa16281c4e9df40\n            - id: subnet-0d749e9461f70bf86\n    # Configure the load balancers in your environment, once created.\n    http:\n      private:\n        subnets:\n          - subnet-0bfa16281c4e9df40\n          - subnet-0d749e9461f70bf86\n        ingress:\n          vpc: true # Enable incoming traffic within the VPC to the internal load balancer.\n      #public:\n    \nParameters:\n  AppName:\n    Type: String\n  EnvironmentName:\n    Type: String\n  ALBWorkloads:\n    Type: String\n  InternalALBWorkloads:\n    Type: String\n  EFSWorkloads:\n    Type: String\n  NATWorkloads:\n    Type: String\n  AppRunnerPrivateWorkloads:\n    Type: String\n  ToolsAccountPrincipalARN:\n    Type: String\n  AppDNSName:\n    Type: String\n  AppDNSDelegationRole:\n    Type: String\n  Aliases:\n    Type: String\n  CreateHTTPSListener:\n    Type: String\n    AllowedValues: [true, false]\n  CreateInternalHTTPSListener:\n    Type: String\n    AllowedValues: [true, false]\n  ServiceDiscoveryEndpoint:\n    Type: String\nConditions:\n  CreateALB:\n    !Not [!Equals [ !Ref ALBWorkloads, \"\" ]]\n  CreateInternalALB:\n    !Not [!Equals [ !Ref InternalALBWorkloads, \"\" ]]\n  DelegateDNS:\n    !Not [!Equals [ !Ref AppDNSName, \"\" ]]\n  ExportHTTPSListener: !And\n    - !Condition CreateALB\n    - !Equals [ !Ref CreateHTTPSListener, true ]\n  ExportInternalHTTPSListener: !And\n    - !Condition CreateInternalALB\n    - !Equals [ !Ref CreateInternalHTTPSListener, true ]\n  CreateEFS:\n    !Not [!Equals [ !Ref EFSWorkloads, \"\"]]\n  CreateNATGateways:\n    !Not [!Equals [ !Ref NATWorkloads, \"\"]]\n  CreateAppRunnerVPCEndpoint:\n    !Not [!Equals [ !Ref AppRunnerPrivateWorkloads, \"\"]]\n  ManagedAliases: !And\n    - !Condition DelegateDNS\n    - !Not [!Equals [ !Ref Aliases, \"\" ]]\n    - !Condition CreateALB\nResources:\n  # The CloudformationExecutionRole definition must be immediately followed with DeletionPolicy: Retain.\n  # See #1533.\n  CloudformationExecutionRole:\n    Metadata:\n      'aws:copilot:description': 'An IAM Role for AWS CloudFormation to manage resources'\n    DeletionPolicy: Retain\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub ${AWS::StackName}-CFNExecutionRole\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - 'cloudformation.amazonaws.com'\n          Action: sts:AssumeRole\n      Path: /\n      Policies:\n        - PolicyName: executeCfn\n          # This policy is more permissive than the managed PowerUserAccess\n          # since it allows arbitrary role creation, which is needed for the\n          # ECS task role specified by the customers.\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n            - Effect: Allow\n              NotAction:\n                - 'organizations:*'\n                - 'account:*'\n              Resource: '*'\n            - Effect: Allow\n              Action:\n                - 'organizations:DescribeOrganization'\n                - 'account:ListRegions'\n              Resource: '*'\n  EnvironmentManagerRole:\n    Metadata:\n      'aws:copilot:description': 'An IAM Role to describe resources in your environment'\n    DeletionPolicy: Retain\n    Type: AWS::IAM::Role\n    DependsOn: CloudformationExecutionRole\n    Properties:\n      RoleName: !Sub ${AWS::StackName}-EnvManagerRole\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            AWS: !Sub ${ToolsAccountPrincipalARN}\n          Action: sts:AssumeRole\n      Path: /\n      Policies:\n      - PolicyName: root\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Sid: CloudwatchLogs\n            Effect: Allow\n            Action: [\n              \"logs:GetLogRecord\",\n              \"logs:GetQueryResults\",\n              \"logs:StartQuery\",\n              \"logs:GetLogEvents\",\n              \"logs:DescribeLogStreams\",\n              \"logs:StopQuery\",\n              \"logs:TestMetricFilter\",\n              \"logs:FilterLogEvents\",\n              \"logs:GetLogGroupFields\",\n              \"logs:GetLogDelivery\"\n            ]\n            Resource: \"*\"\n          - Sid: Cloudwatch\n            Effect: Allow\n            Action: [\n              \"cloudwatch:DescribeAlarms\"\n            ]\n            Resource: \"*\"\n          - Sid: ECS\n            Effect: Allow\n            Action: [\n              \"ecs:ListAttributes\",\n              \"ecs:ListTasks\",\n              \"ecs:DescribeServices\",\n              \"ecs:DescribeTaskSets\",\n              \"ecs:ListContainerInstances\",\n              \"ecs:DescribeContainerInstances\",\n              \"ecs:DescribeTasks\",\n              \"ecs:DescribeClusters\",\n              \"ecs:UpdateService\",\n              \"ecs:PutAttributes\",\n              \"ecs:StartTelemetrySession\",\n              \"ecs:StartTask\",\n              \"ecs:StopTask\",\n              \"ecs:ListServices\",\n              \"ecs:ListTaskDefinitionFamilies\",\n              \"ecs:DescribeTaskDefinition\",\n              \"ecs:ListTaskDefinitions\",\n              \"ecs:ListClusters\",\n              \"ecs:RunTask\",\n              \"ecs:ListServicesByNamespace\"\n            ]\n            Resource: \"*\"\n          - Sid: ExecuteCommand\n            Effect: Allow\n            Action: [\n              \"ecs:ExecuteCommand\",\n              \"ssm:StartSession\"\n            ]\n            Resource: \"*\"\n            Condition:\n              StringEquals:\n                'aws:ResourceTag/copilot-application': !Sub '${AppName}'\n                'aws:ResourceTag/copilot-environment': !Sub '${EnvironmentName}'\n          - Sid: StartStateMachine\n            Effect: Allow\n            Action:\n              - \"states:StartExecution\"\n              - \"states:DescribeStateMachine\"\n            Resource:\n              - !Sub \"arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AppName}-${EnvironmentName}-*\"\n          - Sid: CloudFormation\n            Effect: Allow\n            Action: [\n              \"cloudformation:CancelUpdateStack\",\n              \"cloudformation:CreateChangeSet\",\n              \"cloudformation:CreateStack\",\n              \"cloudformation:DeleteChangeSet\",\n              \"cloudformation:DeleteStack\",\n              \"cloudformation:Describe*\",\n              \"cloudformation:DetectStackDrift\",\n              \"cloudformation:DetectStackResourceDrift\",\n              \"cloudformation:ExecuteChangeSet\",\n              \"cloudformation:GetTemplate\",\n              \"cloudformation:GetTemplateSummary\",\n              \"cloudformation:UpdateStack\",\n              \"cloudformation:UpdateTerminationProtection\"\n            ]\n            Resource: \"*\"\n          - Sid: GetAndPassCopilotRoles\n            Effect: Allow\n            Action: [\n              \"iam:GetRole\",\n              \"iam:PassRole\"\n            ]\n            Resource: \"*\"\n            Condition:\n              StringEquals:\n                'iam:ResourceTag/copilot-application': !Sub '${AppName}'\n                'iam:ResourceTag/copilot-environment': !Sub '${EnvironmentName}'\n          - Sid: ECR\n            Effect: Allow\n            Action: [\n              \"ecr:BatchGetImage\",\n              \"ecr:BatchCheckLayerAvailability\",\n              \"ecr:CompleteLayerUpload\",\n              \"ecr:DescribeImages\",\n              \"ecr:DescribeRepositories\",\n              \"ecr:GetDownloadUrlForLayer\",\n              \"ecr:InitiateLayerUpload\",\n              \"ecr:ListImages\",\n              \"ecr:ListTagsForResource\",\n              \"ecr:PutImage\",\n              \"ecr:UploadLayerPart\",\n              \"ecr:GetAuthorizationToken\"\n            ]\n            Resource: \"*\"\n          - Sid: ResourceGroups\n            Effect: Allow\n            Action: [\n              \"resource-groups:GetGroup\",\n              \"resource-groups:GetGroupQuery\",\n              \"resource-groups:GetTags\",\n              \"resource-groups:ListGroupResources\",\n              \"resource-groups:ListGroups\",\n              \"resource-groups:SearchResources\"\n            ]\n            Resource: \"*\"\n          - Sid: SSM\n            Effect: Allow\n            Action: [\n              \"ssm:DeleteParameter\",\n              \"ssm:DeleteParameters\",\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\",\n              \"ssm:GetParametersByPath\"\n            ]\n            Resource: \"*\"\n          - Sid: SSMSecret\n            Effect: Allow\n            Action: [\n              \"ssm:PutParameter\",\n              \"ssm:AddTagsToResource\"\n            ]\n            Resource:\n              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/copilot/${AppName}/${EnvironmentName}/secrets/*'\n          - Sid: SSMSession\n            Effect: Allow\n            Action:\n              - ssm:StartSession\n            Resource:\n              - !Sub \"arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-StartPortForwardingSessionToRemoteHost\"\n          - Sid: ELBv2\n            Effect: Allow\n            Action: [\n              \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n              \"elasticloadbalancing:DescribeSSLPolicies\",\n              \"elasticloadbalancing:DescribeLoadBalancers\",\n              \"elasticloadbalancing:DescribeTargetGroupAttributes\",\n              \"elasticloadbalancing:DescribeListeners\",\n              \"elasticloadbalancing:DescribeTags\",\n              \"elasticloadbalancing:DescribeTargetHealth\",\n              \"elasticloadbalancing:DescribeTargetGroups\",\n              \"elasticloadbalancing:DescribeRules\"\n            ]\n            Resource: \"*\"\n          - Sid: BuiltArtifactAccess\n            Effect: Allow\n            Action: [\n              \"s3:ListBucketByTags\",\n              \"s3:GetLifecycleConfiguration\",\n              \"s3:GetBucketTagging\",\n              \"s3:GetInventoryConfiguration\",\n              \"s3:GetObjectVersionTagging\",\n              \"s3:ListBucketVersions\",\n              \"s3:GetBucketLogging\",\n              \"s3:ListBucket\",\n              \"s3:GetAccelerateConfiguration\",\n              \"s3:GetBucketPolicy\",\n              \"s3:GetObjectVersionTorrent\",\n              \"s3:GetObjectAcl\",\n              \"s3:GetEncryptionConfiguration\",\n              \"s3:GetBucketRequestPayment\",\n              \"s3:GetObjectVersionAcl\",\n              \"s3:GetObjectTagging\",\n              \"s3:GetMetricsConfiguration\",\n              \"s3:HeadBucket\",\n              \"s3:GetBucketPublicAccessBlock\",\n              \"s3:GetBucketPolicyStatus\",\n              \"s3:ListBucketMultipartUploads\",\n              \"s3:GetBucketWebsite\",\n              \"s3:ListJobs\",\n              \"s3:GetBucketVersioning\",\n              \"s3:GetBucketAcl\",\n              \"s3:GetBucketNotification\",\n              \"s3:GetReplicationConfiguration\",\n              \"s3:ListMultipartUploadParts\",\n              \"s3:GetObject\",\n              \"s3:GetObjectTorrent\",\n              \"s3:GetAccountPublicAccessBlock\",\n              \"s3:ListAllMyBuckets\",\n              \"s3:DescribeJob\",\n              \"s3:GetBucketCORS\",\n              \"s3:GetAnalyticsConfiguration\",\n              \"s3:GetObjectVersionForReplication\",\n              \"s3:GetBucketLocation\",\n              \"s3:GetObjectVersion\",\n              \"kms:Decrypt\"\n            ]\n            Resource: \"*\"\n          - Sid: PutObjectsToArtifactBucket\n            Effect: Allow\n            Action:\n              - s3:PutObject\n              - s3:PutObjectAcl\n            Resource:\n            - arn:aws:s3:::stackset-example-app-infr-pipelinebuiltartifactbuc-4djimvzac1ue\n            - arn:aws:s3:::stackset-example-app-infr-pipelinebuiltartifactbuc-4djimvzac1ue/*\n          - Sid: EncryptObjectsInArtifactBucket\n            Effect: Allow\n            Action:\n              - kms:GenerateDataKey\n            Resource: arn:aws:kms:ap-southeast-1:024848467457:key/ce44c132-59fd-4363-8142-71dcc014d53c\n          - Sid: EC2\n            Effect: Allow\n            Action: [\n              \"ec2:DescribeSubnets\",\n              \"ec2:DescribeSecurityGroups\",\n              \"ec2:DescribeNetworkInterfaces\",\n              \"ec2:DescribeRouteTables\"\n            ]\n            Resource: \"*\"\n          - Sid: AppRunner\n            Effect: Allow\n            Action: [\n              \"apprunner:DescribeService\",\n              \"apprunner:ListOperations\",\n              \"apprunner:ListServices\",\n              \"apprunner:PauseService\",\n              \"apprunner:ResumeService\",\n              \"apprunner:StartDeployment\",\n              \"apprunner:DescribeObservabilityConfiguration\",\n              \"apprunner:DescribeVpcIngressConnection\"\n            ]\n            Resource: \"*\"\n          - Sid: Tags\n            Effect: Allow\n            Action: [\n              \"tag:GetResources\"\n            ]\n            Resource: \"*\"\n          - Sid: ApplicationAutoscaling\n            Effect: Allow\n            Action: [\n              \"application-autoscaling:DescribeScalingPolicies\"\n            ]\n            Resource: \"*\"\n          - Sid: DeleteRoles\n            Effect: Allow\n            Action: [\n              \"iam:DeleteRole\",\n              \"iam:ListRolePolicies\",\n              \"iam:DeleteRolePolicy\"\n            ]\n            Resource:\n              - !GetAtt CloudformationExecutionRole.Arn\n              - !Sub \"arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWS::StackName}-EnvManagerRole\"\n          - Sid: DeleteEnvStack\n            Effect: Allow\n            Action:\n              - 'cloudformation:DescribeStacks'\n              - 'cloudformation:DeleteStack'\n            Resource:\n              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'\n          - Sid: ListStacks\n            Effect: Allow\n            Action:\n              - 'cloudformation:ListStacks'\n            Resource: \"*\"\n          - Sid: RDS\n            Effect: Allow\n            Action:\n              - 'rds:DescribeDBInstances'\n              - 'rds:DescribeDBClusters'\n            Resource: \"*\"\n  # Creates a service discovery namespace with the form provided in the parameter.\n  # For new environments after 1.5.0, this is \"env.app.local\". For upgraded environments from\n  # before 1.5.0, this is app.local.\n  ServiceDiscoveryNamespace:\n    Metadata:\n      'aws:copilot:description': 'A private DNS namespace for discovering services within the environment'\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\n    Properties:\n      Name: !Ref ServiceDiscoveryEndpoint\n      Vpc: vpc-0a17e75ca029d7293\n  Cluster:\n    Metadata:\n      'aws:copilot:description': 'An ECS cluster to group your services'\n    Type: AWS::ECS::Cluster\n    Properties:\n      CapacityProviders: ['FARGATE', 'FARGATE_SPOT']\n      Configuration:\n        ExecuteCommandConfiguration:\n          Logging: DEFAULT\n      ClusterSettings:\n        - Name: containerInsights\n          Value: disabled\n  PublicHTTPLoadBalancerSecurityGroup:\n    Metadata:\n      'aws:copilot:description': 'A security group for your load balancer allowing HTTP traffic'\n    Condition: CreateALB\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: HTTP access to the public facing load balancer\n      SecurityGroupIngress:\n        - CidrIp: 0.0.0.0/0\n          Description: Allow from anyone on port 80\n          FromPort: 80\n          IpProtocol: tcp\n          ToPort: 80\n      VpcId: vpc-0a17e75ca029d7293\n      Tags:\n        - Key: Name\n          Value: !Sub 'copilot-${AppName}-${EnvironmentName}-lb-http'\n  PublicHTTPSLoadBalancerSecurityGroup:\n    Metadata:\n      'aws:copilot:description': 'A security group for your load balancer allowing HTTPS traffic'\n    Condition: ExportHTTPSListener\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: HTTPS access to the public facing load balancer\n      SecurityGroupIngress:\n        - CidrIp: 0.0.0.0/0\n          Description: Allow from anyone on port 443\n          FromPort: 443\n          IpProtocol: tcp\n          ToPort: 443\n      VpcId: vpc-0a17e75ca029d7293\n      Tags:\n        - Key: Name\n          Value: !Sub 'copilot-${AppName}-${EnvironmentName}-lb-https'\n  InternalLoadBalancerSecurityGroup:\n    Metadata:\n      'aws:copilot:description': 'A security group for your internal load balancer allowing HTTP traffic from within the VPC'\n    Condition: CreateInternalALB\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Access to the internal load balancer\n      VpcId: vpc-0a17e75ca029d7293\n      Tags:\n        - Key: Name\n          Value: !Sub 'copilot-${AppName}-${EnvironmentName}-internal-lb'\n  # Only accept requests coming from the public ALB, internal ALB, or other containers in the same security group.\n  EnvironmentSecurityGroup:\n    Metadata:\n      'aws:copilot:description': 'A security group to allow your containers to talk to each other'\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: !Join ['', [!Ref AppName, '-', !Ref EnvironmentName, EnvironmentSecurityGroup]]\n      VpcId: vpc-0a17e75ca029d7293\n      Tags:\n        - Key: Name\n          Value: !Sub 'copilot-${AppName}-${EnvironmentName}-env'\n  EnvironmentHTTPSecurityGroupIngressFromPublicALB:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: CreateALB\n    Properties:\n      Description: HTTP ingress from the public ALB\n      GroupId: !Ref EnvironmentSecurityGroup\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref PublicHTTPLoadBalancerSecurityGroup\n  EnvironmentHTTPSSecurityGroupIngressFromPublicALB:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: ExportHTTPSListener\n    Properties:\n      Description: HTTPS ingress from the public ALB\n      GroupId: !Ref EnvironmentSecurityGroup\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref PublicHTTPSLoadBalancerSecurityGroup\n  EnvironmentSecurityGroupIngressFromInternalALB:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: CreateInternalALB\n    Properties:\n      Description: Ingress from the internal ALB\n      GroupId: !Ref EnvironmentSecurityGroup\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref InternalLoadBalancerSecurityGroup\n  EnvironmentSecurityGroupIngressFromSelf:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      Description: Ingress from other containers in the same security group\n      GroupId: !Ref EnvironmentSecurityGroup\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup\n  InternalALBIngressFromEnvironmentSecurityGroup:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: CreateInternalALB\n    Properties:\n      Description: Ingress from the env security group\n      GroupId: !Ref InternalLoadBalancerSecurityGroup\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup\n  InternalLoadBalancerSecurityGroupIngressFromHttp:\n    Metadata:\n      'aws:copilot:description': 'An inbound rule to the internal load balancer security group for port 80 within the VPC'\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: CreateInternalALB\n    Properties:\n      Description: Allow from within the VPC on port 80\n      CidrIp: 0.0.0.0/0\n      FromPort: 80\n      ToPort: 80\n      IpProtocol: tcp\n      GroupId: !Ref InternalLoadBalancerSecurityGroup\n  InternalLoadBalancerSecurityGroupIngressFromHttps:\n    Metadata:\n      'aws:copilot:description': 'An inbound rule to the internal load balancer security group for port 443 within the VPC'\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: ExportInternalHTTPSListener\n    Properties:\n      Description: Allow from within the VPC on port 443\n      CidrIp: 0.0.0.0/0\n      FromPort: 443\n      ToPort: 443\n      IpProtocol: tcp\n      GroupId: !Ref InternalLoadBalancerSecurityGroup\n  PublicLoadBalancer:\n    Metadata:\n      'aws:copilot:description': 'An Application Load Balancer to distribute public traffic to your services'\n    Condition: CreateALB\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      LoadBalancerAttributes:\n        - Key: 'access_logs.s3.enabled'\n          Value: false\n      Scheme: internet-facing\n      SecurityGroups: \n        - !GetAtt PublicHTTPLoadBalancerSecurityGroup.GroupId\n        - !If [ExportHTTPSListener, !GetAtt PublicHTTPSLoadBalancerSecurityGroup.GroupId, !Ref \"AWS::NoValue\"]\n      Subnets: [ subnet-0af9ee19c930ab38a, subnet-034cc76393f7ae314,  ]\n      Type: application\n  # Assign a dummy target group that with no real services as targets, so that we can create\n  # the listeners for the services.\n  DefaultHTTPTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Condition: CreateALB\n    Properties:\n      #  Check if your application is healthy within 20 = 10*2 seconds, compared to 2.5 mins = 30*5 seconds.\n      HealthCheckIntervalSeconds: 10 # Default is 30.\n      HealthyThresholdCount: 2       # Default is 5.\n      HealthCheckTimeoutSeconds: 5\n      Port: 80\n      Protocol: HTTP\n      TargetGroupAttributes:\n        - Key: deregistration_delay.timeout_seconds\n          Value: 60                  # Default is 300.\n      TargetType: ip\n      VpcId: vpc-0a17e75ca029d7293\n  HTTPListener:\n    Metadata:\n      'aws:copilot:description': 'A load balancer listener to route HTTP traffic'\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Condition: CreateALB\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref DefaultHTTPTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref PublicLoadBalancer\n      Port: 80\n      Protocol: HTTP\n  HTTPSListener:\n    Metadata:\n      'aws:copilot:description': 'A load balancer listener to route HTTPS traffic'\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Condition: ExportHTTPSListener\n    Properties:\n      Certificates:\n        - CertificateArn: !Ref HTTPSCert\n      DefaultActions:\n        - TargetGroupArn: !Ref DefaultHTTPTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref PublicLoadBalancer\n      Port: 443\n      Protocol: HTTPS\n  InternalLoadBalancer:\n    Metadata:\n      'aws:copilot:description': 'An internal Application Load Balancer to distribute private traffic from within the VPC to your services'\n    Condition: CreateInternalALB\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Scheme: internal\n      SecurityGroups: [ !GetAtt InternalLoadBalancerSecurityGroup.GroupId ]\n      Subnets: [subnet-0bfa16281c4e9df40, subnet-0d749e9461f70bf86]\n      Type: application\n  # Assign a dummy target group that with no real services as targets, so that we can create\n  # the listeners for the services.\n  DefaultInternalHTTPTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Condition: CreateInternalALB\n    Properties:\n      #  Check if your application is healthy within 20 = 10*2 seconds, compared to 2.5 mins = 30*5 seconds.\n      HealthCheckIntervalSeconds: 10 # Default is 30.\n      HealthyThresholdCount: 2       # Default is 5.\n      HealthCheckTimeoutSeconds: 5\n      Port: 80\n      Protocol: HTTP\n      TargetGroupAttributes:\n        - Key: deregistration_delay.timeout_seconds\n          Value: 60                  # Default is 300.\n      TargetType: ip\n      VpcId: vpc-0a17e75ca029d7293\n  InternalHTTPListener:\n    Metadata:\n      'aws:copilot:description': 'An internal load balancer listener to route HTTP traffic'\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Condition: CreateInternalALB\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref DefaultInternalHTTPTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref InternalLoadBalancer\n      Port: 80\n      Protocol: HTTP\n  InternalHTTPSListener:\n    Metadata:\n      'aws:copilot:description': 'An internal load balancer listener to route HTTPS traffic'\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Condition: ExportInternalHTTPSListener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref DefaultInternalHTTPTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref InternalLoadBalancer\n      Port: 443\n      Protocol: HTTPS\n  InternalWorkloadsHostedZone:\n    Metadata:\n      'aws:copilot:description': 'A hosted zone named staging.example-app.internal for backends behind a private load balancer'\n    Condition: CreateInternalALB\n    Type: AWS::Route53::HostedZone\n    Properties:\n      Name: !Sub ${EnvironmentName}.${AppName}.internal\n      VPCs:\n        - VPCId: vpc-0a17e75ca029d7293\n          VPCRegion: !Ref AWS::Region\n  FileSystem:\n    Condition: CreateEFS\n    Type: AWS::EFS::FileSystem\n    Metadata:\n      'aws:copilot:description': 'An EFS filesystem for persistent task storage'\n    Properties:\n      BackupPolicy:\n        Status: ENABLED\n      Encrypted: true\n      FileSystemPolicy:\n        Version: '2012-10-17'\n        Id: CopilotEFSPolicy\n        Statement:\n          - Sid: AllowIAMFromTaggedRoles\n            Effect: Allow\n            Principal:\n              AWS: '*'\n            Action:\n              - elasticfilesystem:ClientWrite\n              - elasticfilesystem:ClientMount\n            Condition:\n              Bool:\n                'elasticfilesystem:AccessedViaMountTarget': true\n              StringEquals:\n                'iam:ResourceTag/copilot-application': !Sub '${AppName}'\n                'iam:ResourceTag/copilot-environment': !Sub '${EnvironmentName}'\n          - Sid: DenyUnencryptedAccess\n            Effect: Deny\n            Principal: '*'\n            Action: 'elasticfilesystem:*'\n            Condition:\n              Bool:\n                'aws:SecureTransport': false\n      LifecyclePolicies:\n        - TransitionToIA: AFTER_30_DAYS\n      PerformanceMode: generalPurpose\n      ThroughputMode: bursting\n  EFSSecurityGroup:\n    Metadata:\n      'aws:copilot:description': 'A security group to allow your containers to talk to EFS storage'\n    Type: AWS::EC2::SecurityGroup\n    Condition: CreateEFS\n    Properties:\n      GroupDescription: !Join ['', [!Ref AppName, '-', !Ref EnvironmentName, EFSSecurityGroup]]\n      VpcId: vpc-0a17e75ca029d7293\n      Tags:\n        - Key: Name\n          Value: !Sub 'copilot-${AppName}-${EnvironmentName}-efs'\n  EFSSecurityGroupIngressFromEnvironment:\n    Type: AWS::EC2::SecurityGroupIngress\n    Condition: CreateEFS\n    Properties:\n      Description: Ingress from containers in the Environment Security Group.\n      GroupId: !Ref EFSSecurityGroup\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup\n  MountTarget1:\n    Type: AWS::EFS::MountTarget\n    Condition: CreateEFS\n    Properties:\n      FileSystemId: !Ref FileSystem\n      SubnetId: subnet-0bfa16281c4e9df40\n      SecurityGroups:\n        - !Ref EFSSecurityGroup\n  MountTarget2:\n    Type: AWS::EFS::MountTarget\n    Condition: CreateEFS\n    Properties:\n      FileSystemId: !Ref FileSystem\n      SubnetId: subnet-0d749e9461f70bf86\n      SecurityGroups:\n        - !Ref EFSSecurityGroup\n  \n  CustomResourceRole:\n    Metadata:\n      'aws:copilot:description': 'An IAM role to manage certificates and Route53 hosted zones'\n    Type: AWS::IAM::Role\n    Condition: DelegateDNS\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          -\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Policies:\n        - PolicyName: \"DNSandACMAccess\"\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"acm:ListCertificates\"\n                  - \"acm:RequestCertificate\"\n                  - \"acm:DescribeCertificate\"\n                  - \"acm:GetCertificate\"\n                  - \"acm:DeleteCertificate\"\n                  - \"acm:AddTagsToCertificate\"\n                  - \"sts:AssumeRole\"\n                  - \"logs:*\"\n                  - \"route53:ChangeResourceRecordSets\"\n                  - \"route53:Get*\"\n                  - \"route53:Describe*\"\n                  - \"route53:ListResourceRecordSets\"\n                  - \"route53:ListHostedZonesByName\"\n                Resource:\n                  - \"*\"\n  EnvironmentHostedZone:\n    Metadata:\n      'aws:copilot:description': \"A Route 53 Hosted Zone for the environment's subdomain\"\n    Type: \"AWS::Route53::HostedZone\"\n    Condition: DelegateDNS\n    Properties:\n      HostedZoneConfig:\n        Comment: !Sub \"HostedZone for environment ${EnvironmentName} - ${EnvironmentName}.${AppName}.${AppDNSName}\"\n      Name: !Sub ${EnvironmentName}.${AppName}.${AppDNSName}\n  CertificateValidationFunction:\n    Type: AWS::Lambda::Function\n    Condition: DelegateDNS\n    Properties:\n      Code:\n        S3Bucket: stackset-example-app-infr-pipelinebuiltartifactbuc-4djimvzac1ue\n        S3Key: manual/scripts/custom-resources/certificatevalidationfunction/d386997f9939549cab9fcebd1e590fa8e93dab62dbc4cfdab92f299b3a7b9ecd.zip\n      Handler: \"index.certificateRequestHandler\"\n      Timeout: 900\n      MemorySize: 512\n      Role: !GetAtt 'CustomResourceRole.Arn'\n      Runtime: nodejs20.x\n  \n  CustomDomainFunction:\n    Condition: ManagedAliases\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: stackset-example-app-infr-pipelinebuiltartifactbuc-4djimvzac1ue\n        S3Key: manual/scripts/custom-resources/customdomainfunction/10a594c22cd00bbdb7bfe83d78aa929a9bf99ff87ac2618ada9581d5162c1438.zip\n      Handler: \"index.handler\"\n      Timeout: 600\n      MemorySize: 512\n      Role: !GetAtt 'CustomResourceRole.Arn'\n      Runtime: nodejs20.x \n  \n  DNSDelegationFunction:\n    Type: AWS::Lambda::Function\n    Condition: DelegateDNS\n    Properties:\n      Code:\n        S3Bucket: stackset-example-app-infr-pipelinebuiltartifactbuc-4djimvzac1ue\n        S3Key: manual/scripts/custom-resources/dnsdelegationfunction/0fce63197f0b8cf5e3bd944358aa1ef736f4d7d383fb9db582ca312466b0e6eb.zip\n      Handler: \"index.domainDelegationHandler\"\n      Timeout: 600\n      MemorySize: 512\n      Role: !GetAtt 'CustomResourceRole.Arn'\n      Runtime: nodejs20.x\n  \n  DelegateDNSAction:\n    Metadata:\n      'aws:copilot:description': 'Delegate DNS for environment subdomain'\n    Condition: DelegateDNS\n    Type: Custom::DNSDelegationFunction\n    DependsOn:\n    - DNSDelegationFunction\n    - EnvironmentHostedZone\n    Properties:\n      ServiceToken: !GetAtt DNSDelegationFunction.Arn\n      DomainName: !Sub ${AppName}.${AppDNSName}\n      SubdomainName: !Sub ${EnvironmentName}.${AppName}.${AppDNSName}\n      NameServers: !GetAtt EnvironmentHostedZone.NameServers\n      RootDNSRole: !Ref AppDNSDelegationRole\n  \n  HTTPSCert:\n    Metadata:\n      'aws:copilot:description': 'Request and validate an ACM certificate for your domain'\n    Condition: DelegateDNS\n    Type: Custom::CertificateValidationFunction\n    DependsOn:\n    - CertificateValidationFunction\n    - EnvironmentHostedZone\n    - DelegateDNSAction\n    Properties:\n      ServiceToken: !GetAtt CertificateValidationFunction.Arn\n      AppName: !Ref AppName\n      EnvName: !Ref EnvironmentName\n      DomainName: !Ref AppDNSName\n      Aliases: !Ref Aliases\n      EnvHostedZoneId: !Ref EnvironmentHostedZone\n      Region: !Ref AWS::Region\n      RootDNSRole: !Ref AppDNSDelegationRole\n  \n  CustomDomainAction:\n    Metadata:\n      'aws:copilot:description': 'Add an A-record to the hosted zone for the domain alias'\n    Condition: ManagedAliases\n    Type: Custom::CustomDomainFunction\n    Properties:\n      ServiceToken: !GetAtt CustomDomainFunction.Arn\n      AppName: !Ref AppName\n      EnvName: !Ref EnvironmentName\n      Aliases: !Ref Aliases\n      AppDNSRole: !Ref AppDNSDelegationRole\n      DomainName: !Ref AppDNSName\n      PublicAccessDNS: !GetAtt PublicLoadBalancer.DNSName\n      PublicAccessHostedZone: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID\n  LogResourcePolicy:\n    Metadata:\n      'aws:copilot:description': 'A resource policy to allow AWS services to create log streams for your workloads.'\n    Type: AWS::Logs::ResourcePolicy\n    Properties:\n      PolicyName: !Sub '${AppName}-${EnvironmentName}-LogResourcePolicy'\n      PolicyDocument:\n        Fn::Sub: |\n          {\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [\n              {\n                \"Sid\": \"StateMachineToCloudWatchLogs\",\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                  \"Service\": [\"delivery.logs.amazonaws.com\"]\n                },\n                \"Action\": [\n                  \"logs:CreateLogStream\",\n                  \"logs:PutLogEvents\"\n                ],\n                \"Resource\": [\n                  \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/copilot/${AppName}-${EnvironmentName}-*:log-stream:*\"\n                ],\n                \"Condition\": {\n                  \"StringEquals\": {\n                    \"aws:SourceAccount\": \"${AWS::AccountId}\"\n                  },\n                  \"ArnLike\": {\n                    \"aws:SourceArn\": \"arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*\"\n                  }\n                }\n              }\n            ]\n          }\nOutputs:\n  VpcId:\n    Value: vpc-0a17e75ca029d7293\n    Export:\n      Name: !Sub ${AWS::StackName}-VpcId\n  PublicSubnets:\n    Value: !Join [ ',', [ subnet-0af9ee19c930ab38a, subnet-034cc76393f7ae314, ] ]\n    Export:\n      Name: !Sub ${AWS::StackName}-PublicSubnets\n  PrivateSubnets:\n    Value: !Join [ ',', [ subnet-0bfa16281c4e9df40, subnet-0d749e9461f70bf86, ] ]\n    Export:\n      Name: !Sub ${AWS::StackName}-PrivateSubnets\n  ServiceDiscoveryNamespaceID:\n    Value: !GetAtt ServiceDiscoveryNamespace.Id\n    Export:\n      Name: !Sub ${AWS::StackName}-ServiceDiscoveryNamespaceID\n  EnvironmentSecurityGroup:\n    Value: !Ref EnvironmentSecurityGroup\n    Export:\n      Name: !Sub ${AWS::StackName}-EnvironmentSecurityGroup\n  PublicLoadBalancerDNSName:\n    Condition: CreateALB\n    Value: !GetAtt PublicLoadBalancer.DNSName\n    Export:\n      Name: !Sub ${AWS::StackName}-PublicLoadBalancerDNS\n  PublicLoadBalancerFullName:\n    Condition: CreateALB\n    Value: !GetAtt PublicLoadBalancer.LoadBalancerFullName\n    Export:\n      Name: !Sub ${AWS::StackName}-PublicLoadBalancerFullName\n  PublicLoadBalancerHostedZone:\n    Condition: CreateALB\n    Value: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID\n    Export:\n      Name: !Sub ${AWS::StackName}-CanonicalHostedZoneID\n  HTTPListenerArn:\n    Condition: CreateALB\n    Value: !Ref HTTPListener\n    Export:\n      Name: !Sub ${AWS::StackName}-HTTPListenerArn\n  HTTPSListenerArn:\n    Condition: ExportHTTPSListener\n    Value: !Ref HTTPSListener\n    Export:\n      Name: !Sub ${AWS::StackName}-HTTPSListenerArn\n  DefaultHTTPTargetGroupArn:\n    Condition: CreateALB\n    Value: !Ref DefaultHTTPTargetGroup\n    Export:\n      Name: !Sub ${AWS::StackName}-DefaultHTTPTargetGroup\n  InternalLoadBalancerDNSName:\n    Condition: CreateInternalALB\n    Value: !GetAtt InternalLoadBalancer.DNSName\n    Export:\n      Name: !Sub ${AWS::StackName}-InternalLoadBalancerDNS\n  InternalLoadBalancerFullName:\n    Condition: CreateInternalALB\n    Value: !GetAtt InternalLoadBalancer.LoadBalancerFullName\n    Export:\n      Name: !Sub ${AWS::StackName}-InternalLoadBalancerFullName\n  InternalLoadBalancerHostedZone:\n    Condition: CreateInternalALB\n    Value: !GetAtt InternalLoadBalancer.CanonicalHostedZoneID\n    Export:\n      Name: !Sub ${AWS::StackName}-InternalLoadBalancerCanonicalHostedZoneID\n  InternalWorkloadsHostedZone:\n    Condition: CreateInternalALB\n    Value: !Ref InternalWorkloadsHostedZone\n    Export:\n      Name: !Sub ${AWS::StackName}-InternalWorkloadsHostedZoneID\n  InternalWorkloadsHostedZoneName:\n    Condition: CreateInternalALB\n    Value: !Sub ${EnvironmentName}.${AppName}.internal\n    Export:\n      Name: !Sub ${AWS::StackName}-InternalWorkloadsHostedZoneName\n  InternalHTTPListenerArn:\n    Condition: CreateInternalALB\n    Value: !Ref InternalHTTPListener\n    Export:\n      Name: !Sub ${AWS::StackName}-InternalHTTPListenerArn\n  InternalHTTPSListenerArn:\n    Condition: ExportInternalHTTPSListener\n    Value: !Ref InternalHTTPSListener\n    Export:\n      Name: !Sub ${AWS::StackName}-InternalHTTPSListenerArn\n  InternalLoadBalancerSecurityGroup:\n    Condition: CreateInternalALB\n    Value: !Ref InternalLoadBalancerSecurityGroup\n    Export:\n      Name: !Sub ${AWS::StackName}-InternalLoadBalancerSecurityGroup\n  ClusterId:\n    Value: !Ref Cluster\n    Export:\n      Name: !Sub ${AWS::StackName}-ClusterId\n  EnvironmentManagerRoleARN:\n    Value: !GetAtt EnvironmentManagerRole.Arn\n    Description: The role to be assumed by the ecs-cli to manage environments.\n    Export:\n      Name: !Sub ${AWS::StackName}-EnvironmentManagerRoleARN\n  CFNExecutionRoleARN:\n    Value: !GetAtt CloudformationExecutionRole.Arn\n    Description: The role to be assumed by the Cloudformation service when it deploys application infrastructure.\n    Export:\n      Name: !Sub ${AWS::StackName}-CFNExecutionRoleARN\n  EnvironmentHostedZone:\n    Condition: DelegateDNS\n    Value: !Ref EnvironmentHostedZone\n    Description: The HostedZone for this environment's private DNS.\n    Export:\n      Name: !Sub ${AWS::StackName}-HostedZone\n  EnvironmentSubdomain:\n    Condition: DelegateDNS\n    Value: !Sub ${EnvironmentName}.${AppName}.${AppDNSName}\n    Description: The domain name of this environment.\n    Export:\n      Name: !Sub ${AWS::StackName}-SubDomain\n  EnabledFeatures:\n    Value: !Sub '${ALBWorkloads},${InternalALBWorkloads},${EFSWorkloads},${NATWorkloads},${Aliases},${AppRunnerPrivateWorkloads}'\n    Description: Required output to force the stack to update if mutating feature params, like ALBWorkloads, does not change the template.\n  ManagedFileSystemID:\n    Condition: CreateEFS\n    Value: !Ref FileSystem\n    Description: The ID of the Copilot-managed EFS filesystem.\n    Export:\n      Name: !Sub ${AWS::StackName}-FilesystemID\n  PublicALBAccessible:\n    Condition: CreateALB\n    Value: true\n  LastForceDeployID:\n    Value: \"\"\n    Description: Optionally force the template to update when no immediate resource change is present.\n",
    "StagesAvailable": [
        "Original",
        "Processed"
    ]
}
